{"version":3,"sources":["images/spinner.svg","components/Tile.jsx","components/Header.jsx","components/Loading.jsx","components/secrets.js","components/Body.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Tile","styles","this","props","isLongTile","weatherDes","Card","className","border","Body","Title","Math","round","weatherData","Subtitle","date","Text","Component","Header","city","Spinner","src","spinner","alt","constants","state","temp","weatherDescription","dates","loaded","num","isLong","todayDate","Date","dd","String","getDate","padStart","mm","getMonth","getFullYear","navigator","geolocation","Promise","res","rej","getCurrentPosition","location","apiKey","todayURL","forecastURL","end","coords","latitude","longitude","getLocation","urls","getApiURL","today","getTodayDate","cityLocation","fetch","then","json","data","push","main","weather","name","list","i","length","str","dt_txt","includes","console","log","substring","setState","catch","Fragment","Container","style","textAlign","Row","Col","paddingBottom","renderTile","Loading","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7e3ceafa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ee7cd8ed.svg\";","import React from 'react';\r\nimport {Component} from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nclass Tile extends Component {\r\n    render() { \r\n        var styles = (this.props.isLongTile) ? \"longTile commonTileClass\" : \"tile bigTileClass\";\r\n        \r\n        styles += \" tile\" + this.props.weatherDes;\r\n\r\n        return ( \r\n            <Card className={styles} border=\"dark\">\r\n                <Card.Body>\r\n                    <Card.Title><p>{Math.round(this.props.weatherData)} &#8451;</p></Card.Title>\r\n                    <Card.Subtitle className=\"mb-2 text-muted\">{this.props.date}</Card.Subtitle>\r\n                    <Card.Text className='tileText'>\r\n                        {this.props.weatherDes} \r\n                    </Card.Text>\r\n                </Card.Body>\r\n            </Card>\r\n            );\r\n    }\r\n}\r\n \r\nexport default Tile;","import React, {Component} from 'react';\r\n\r\nclass Header extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"headerBox\">\r\n                <h4 className=\"header\">The weather in {this.props.city} is </h4>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\nimport spinner from '../images/spinner.svg';\r\n\r\nclass Spinner extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"loading\">\r\n                <img src={spinner} alt=\"loading icon\" className=\"spinner\"/>\r\n                <h1>Loading...</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Spinner","var constants = {\r\n    apiKey: '752c19413eb03dc172eb2aba7ebb9258',\r\n};\r\n\r\nexport {constants};","import React from 'react';\r\nimport {Component} from 'react';\r\nimport '../components.css';\r\nimport {Container, Row, Col} from 'react-bootstrap';\r\nimport Tile from './Tile';\r\nimport Header from './Header';\r\nimport Loading from './Loading';\r\nimport {constants} from './secrets.js';\r\n\r\nclass Body extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            temp: [],\r\n            weatherDescription: [],\r\n            dates: [],\r\n            city: \"\",\r\n            loaded: false\r\n        }\r\n    }\r\n\r\n    renderTile(num){\r\n        let isLong = (num === 0) ? false : true;\r\n        return (\r\n            <Tile isLongTile={isLong} weatherData={this.state.temp[num]} weatherDes={this.state.weatherDescription[num]} date={this.state.dates[num]}/>\r\n        );\r\n    }\r\n\r\n    getTodayDate(){\r\n        let todayDate = new Date();\r\n        let dd = String(todayDate.getDate()).padStart(2, '0');\r\n        let mm = String(todayDate.getMonth() + 1).padStart(2, '0'); \r\n        let yyyy = todayDate.getFullYear();\r\n        return (yyyy+\"-\"+mm+\"-\"+dd);\r\n    }\r\n\r\n    // get current user location\r\n    getLocation(){ \r\n        if (navigator.geolocation) {\r\n            // return location as in JSON\r\n            return new Promise((res, rej) => {\r\n                navigator.geolocation.getCurrentPosition(res, rej)\r\n            });\r\n        }\r\n        return 'Toronto';\r\n    }\r\n\r\n    // make custom api urls\r\n    getApiURL(location){\r\n        const apiKey = constants.apiKey;\r\n        let todayURL = 'https://api.openweathermap.org/data/2.5/weather?';\r\n        let forecastURL = 'https://api.openweathermap.org/data/2.5/forecast?'; \r\n        let end = (location === 'Toronto') ? 'q=Toronto' : 'lat=' + location.coords.latitude + '&lon=' + location.coords.longitude;\r\n        todayURL += end + '&units=metric&appid=' + apiKey;\r\n        forecastURL += end + '&units=metric&appid=' + apiKey;\r\n        return [todayURL, forecastURL];\r\n    }\r\n\r\n    // api call function\r\n    async componentDidMount() {\r\n        let location = await this.getLocation();\r\n        let urls = this.getApiURL(location);\r\n        let today = this.getTodayDate();\r\n\r\n        // weather data from api call\r\n        let temp = [];\r\n        let weatherDescription = [];\r\n        let dates = [];\r\n        let cityLocation = \"\";\r\n\r\n        // get today's weather\r\n        await fetch(urls[0]).then(res => res.json()).then((data) => {\r\n            temp.push(data.main.temp);\r\n            weatherDescription.push(data.weather[0].main);\r\n            dates.push(today);\r\n            cityLocation = data.name;\r\n        });\r\n\r\n        // get weather forecast from the api\r\n        await fetch(urls[1]).then(res => res.json()).then((data) => {\r\n\r\n            let list = data.list;\r\n            // look for weather that at 12:00 and parse the weather data for temperature, weather description, and date\r\n            for (let i = 0; i < list.length; i++){\r\n                let str = list[i].dt_txt;\r\n                if (!(str.includes(today)) && str.includes('12:00:00')){\r\n                    console.log(list[i]);\r\n                    let weatherData = list[i];\r\n                    temp.push(weatherData.main.temp);\r\n                    weatherDescription.push(weatherData.weather[0].main);\r\n                    dates.push(weatherData.dt_txt.substring(0, 10));\r\n                }\r\n            }\r\n    \r\n            this.setState({\r\n                temp: temp,\r\n                weatherDescription: weatherDescription,\r\n                dates: dates,\r\n                city: cityLocation,\r\n                loaded: true\r\n            });\r\n        }).catch(console.log('An error occurred while retrieving weather data'));\r\n    }\r\n\r\n    render() { \r\n        let styles = \"body \";\r\n        styles += (this.state.weatherDescription[0] === null) ? \"na\" : this.state.weatherDescription[0];\r\n        styles += \" commonBgdClass\";\r\n\r\n        return ( \r\n            <React.Fragment>\r\n                {this.state.loaded ? (\r\n                    <div className={styles}>\r\n                        <Header city={this.state.city} />\r\n                        <Container style={{textAlign: \"center\"}}>\r\n                            <Row >\r\n                                <Col style={{textAlign: \"center\", paddingBottom: \"2%\"}}>\r\n                                    {this.renderTile(0)}\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    {this.renderTile(1)}\r\n                                </Col>\r\n                                <Col>\r\n                                    {this.renderTile(2)}\r\n                                </Col>\r\n                        \r\n                                <Col>\r\n                                    {this.renderTile(3)}\r\n                                </Col>\r\n                                <Col>\r\n                                    {this.renderTile(4)}\r\n                                </Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </div>\r\n                ) : (\r\n                    // loading screen\r\n                    <Loading />\r\n                )}\r\n            </React.Fragment>  \r\n        );\r\n    }\r\n}\r\n \r\nexport default Body;","import React from 'react';\r\nimport Body from './components/Body.jsx';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Body />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}